/**
 * @fileoverview Firestore Security Rules for Vocalize Feedback Platform
 *
 * Core Philosophy:
 * This ruleset enforces a strict organization-centric model where users and associated data (forms, submissions) are secured by organization membership.
 *
 * Data Structure:
 * - /orgs/{orgId}: Stores organization data, including the owner.
 * - /users/{userId}: Stores user data, associated with an organization.
 * - /forms/{formId}: Stores form data, denormalized with orgId for authorization.
 * - /forms/{formId}/questions/{questionId}: Stores questions for a form.
 * - /submissions/{submissionId}: Stores form submissions, denormalized with formOrgId.
 * - /submissions/{submissionId}/answers/{answerId}: Stores answers for a submission.
 * - /forms/{formId}/metrics_daily/{dateId}: Stores daily metrics for a form.
 * - /forms/{formId}/themes/{themeId}: Stores themes for a form.
 * - /events/{eventId}: Stores append-only event logs (org-independent).
 *
 * Key Security Decisions:
 * - No public listing of users or organizations.
 * - All form-related data is secured by organization membership.
 * - Events are append-only and have minimal restrictions.
 * - Strict ownership for user and organization creation/deletion.
 *
 * Denormalization for Authorization:
 * - The 'orgId' is denormalized from 'orgs' to 'forms' to avoid costly `get()` operations during authorization.
 * - The 'formOrgId' is denormalized from 'forms' to 'submissions' to enable organization-based access control for submissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows management of organization data only by the organization owner.
     * @path /orgs/{orgId}
     * @allow (create) User with matching UID creates a new organization: request.auth.uid == request.resource.data.ownerUid
     * @allow (get) Any authenticated user can read organization data.
     * @allow (update, delete) The organization owner can update/delete. isOwner(resource.data.ownerUid)
     * @deny (create) User tries to create an organization with mismatched UID: request.auth.uid != request.resource.data.ownerUid
     * @principle Enforces organization ownership for write operations and authenticated read access.
     */
    match /orgs/{orgId} {
      function isOwner(ownerUid) {
        return request.auth.uid == ownerUid;
      }

      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.ownerUid);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerUid);
    }

    /**
     * @description Allows management of user data only by the user themselves.
     * @path /users/{userId}
     * @allow (create) User creates their own profile: request.auth.uid == userId
     * @allow (get) The user can read their own profile data. isOwner(userId)
     * @allow (update, delete) The user can update/delete their own profile. isExistingOwner(userId)
     * @deny (create) User tries to create a profile for another user: request.auth.uid != userId
     * @principle Enforces user ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows management of form data only by members of the organization that owns the form.
     * @path /forms/{formId}
     * @allow (create) User creates form in their organization: request.auth.uid != null
     * @allow (get, list) Any authenticated user can read form data.
     * @allow (update, delete) Only org members can update/delete the form data. request.auth.uid != null
     * @deny (create) User attempts to create a form without belonging to an organization.
     * @principle Enforces organization membership for write operations and authenticated read access.
     */
    match /forms/{formId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOrgMember(orgId) {
            return get(/databases/$(database)/documents/orgs/$(orgId)).data.ownerUid == request.auth.uid;
        }

      allow get, list: if isSignedIn();

      allow create: if isSignedIn() && isOrgMember(request.resource.data.orgId);
      allow update: if isSignedIn() && isOrgMember(resource.data.orgId);
      allow delete: if isSignedIn() && isOrgMember(resource.data.orgId);
    }

    /**
     * @description Allows management of questions within a form by members of the organization that owns the form.
     * @path /forms/{formId}/questions/{questionId}
     * @allow (create) User can create a question for a form in their org. request.auth.uid != null
     * @allow (get, list) Any authenticated user can read questions.
     * @allow (update, delete) Org members can update/delete form questions. request.auth.uid != null
     * @deny (create) User attempts to create a question for a form without belonging to the organization.
     * @principle Enforces organization membership for write operations and authenticated read access.
     */
    match /forms/{formId}/questions/{questionId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function getFormOrgId(formId) {
          return get(/databases/$(database)/documents/forms/$(formId)).data.orgId;
        }
        function isOrgMember(orgId) {
            return get(/databases/$(database)/documents/orgs/$(orgId)).data.ownerUid == request.auth.uid;
        }

      allow get, list: if isSignedIn();

      allow create: if isSignedIn() && isOrgMember(getFormOrgId(formId));
      allow update: if isSignedIn() && isOrgMember(getFormOrgId(formId));
      allow delete: if isSignedIn() && isOrgMember(getFormOrgId(formId));
    }

    /**
     * @description Allows management of submissions for a form by members of the organization that owns the form.
     * @path /submissions/{submissionId}
     * @allow (create) User can create submission, org membership is validated. request.auth.uid != null
     * @allow (get, list) Any authenticated user can read submissions.
     * @allow (update, delete) Org members can update/delete submissions. request.auth.uid != null
     * @deny (create) User attempts to create a submission for a form they don't have access to.
     * @principle Enforces organization membership for write operations and authenticated read access, using denormalized 'formOrgId'.
     */
    match /submissions/{submissionId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOrgMember(orgId) {
            return get(/databases/$(database)/documents/orgs/$(orgId)).data.ownerUid == request.auth.uid;
        }

      allow get, list: if isSignedIn();

      allow create: if isSignedIn() && isOrgMember(request.resource.data.formOrgId);
      allow update: if isSignedIn() && isOrgMember(resource.data.formOrgId);
      allow delete: if isSignedIn() && isOrgMember(resource.data.formOrgId);
    }

    /**
     * @description Allows management of answers within a submission by members of the organization that owns the form.
     * @path /submissions/{submissionId}/answers/{answerId}
     * @allow (create) User can create answer for submission. request.auth.uid != null
     * @allow (get, list) Any authenticated user can read answers.
     * @allow (update, delete) Org members can update/delete submission answers. request.auth.uid != null
     * @deny (create) User attempts to create an answer without belonging to the organization.
     * @principle Enforces organization membership for write operations and authenticated read access.
     */
    match /submissions/{submissionId}/answers/{answerId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function getSubmissionFormOrgId(submissionId) {
          return get(/databases/$(database)/documents/submissions/$(submissionId)).data.formOrgId;
        }
        function isOrgMember(orgId) {
            return get(/databases/$(database)/documents/orgs/$(orgId)).data.ownerUid == request.auth.uid;
        }

      allow get, list: if isSignedIn();

      allow create: if isSignedIn() && isOrgMember(getSubmissionFormOrgId(submissionId));
      allow update: if isSignedIn() && isOrgMember(getSubmissionFormOrgId(submissionId));
      allow delete: if isSignedIn() && isOrgMember(getSubmissionFormOrgId(submissionId));
    }

    /**
     * @description Allows read-only access to daily metrics for a form by authenticated users.  Write operations are open for prototyping.
     * @path /forms/{formId}/metrics_daily/{dateId}
     * @allow (get, list) Any authenticated user can read daily metrics.
     * @allow (create, update, delete) All write operations are allowed for prototyping purposes.
     * @principle Allows authenticated read access and open writes (for prototyping).
     */
    match /forms/{formId}/metrics_daily/{dateId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows management of themes within a form by members of the organization that owns the form.
     * @path /forms/{formId}/themes/{themeId}
     * @allow (create) User can create theme. request.auth.uid != null
     * @allow (get, list) Any authenticated user can read themes.
     * @allow (update, delete) Org members can update/delete form themes. request.auth.uid != null
     * @deny (create) User attempts to create a theme without belonging to the organization.
     * @principle Enforces organization membership for write operations and authenticated read access.
     */
    match /forms/{formId}/themes/{themeId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function getFormOrgId(formId) {
          return get(/databases/$(database)/documents/forms/$(formId)).data.orgId;
        }
        function isOrgMember(orgId) {
            return get(/databases/$(database)/documents/orgs/$(orgId)).data.ownerUid == request.auth.uid;
        }

      allow get, list: if isSignedIn();

      allow create: if isSignedIn() && isOrgMember(getFormOrgId(formId));
      allow update: if isSignedIn() && isOrgMember(getFormOrgId(formId));
      allow delete: if isSignedIn() && isOrgMember(getFormOrgId(formId));
    }

    /**
     * @description Allows append-only access to event logs. Anyone can create (log) an event.
     * @path /events/{eventId}
     * @allow (create) Any signed-in user can create an event log. request.auth.uid != null
     * @allow (get) Any signed-in user can get an event log. request.auth.uid != null
     * @deny (update, delete) No one can update or delete event logs.
     * @principle Enforces append-only access for event logging.
     */
    match /events/{eventId} {
        function isSignedIn() {
            return request.auth != null;
        }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    function isSignedIn() {
        return request.auth != null;
    }
  }
}