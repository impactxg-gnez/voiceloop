/**
 * @fileoverview Firestore Security Rules for Vocalize Feedback Platform
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on ownership. Users can only
 * read and modify their own data, unless explicitly allowed otherwise. Data validation
 * is relaxed for rapid prototyping but includes essential checks to prevent
 * relational integrity issues.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Only the authenticated user can
 *   access their own profile.
 * - /forms/{formId}: Stores feedback forms.  Anyone can read the forms, but only the owner can modify them.
 * - /forms/{formId}/questions/{questionId}: Stores individual questions within a form. Anyone can read the questions but only the owner can create them.
 * - /submissions/{submissionId}: Stores form submissions.  Anyone can read the submissions.
 *
 * Key Security Decisions:
 * - Users can only manage their own user documents.
 * - Forms are publicly readable, but only the owner can modify them.
 * - Listing of forms is allowed for all users.
 *
 * Denormalization for Authorization:
 * - Forms store the owner's UID (`ownerUid`) to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their own profile document if request.auth.uid == 'abc'.
     * @allow (get, update, delete) - User 'abc' can read/write their own profile document.
     * @deny (create) - User 'def' cannot create a profile document for user 'abc'.
     * @deny (get, update, delete) - User 'def' cannot read/write user 'abc' profile document.
     * @principle Enforces document ownership for all operations on user documents.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }


      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) ;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages feedback forms.
     * @path /forms/{formId}
     * @allow (get, list) - Any user can read all forms.
     * @allow (create) - User 'abc' can create a form if request.resource.data.ownerUid == 'abc'.
     * @allow (update, delete) - User 'abc' can modify/delete form with ownerUid == 'abc'.
     * @deny (create) - User 'def' cannot create a form with ownerUid == 'abc'.
     * @deny (update, delete) - User 'def' cannot modify/delete form with ownerUid == 'abc'.
     * @principle Allows public read access but enforces owner-only writes.
     */
    match /forms/{formId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner() {
            return request.auth.uid == resource.data.ownerUid;
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
        allow update: if isSignedIn() && isOwner();
        allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Manages questions within a form.
     * @path /forms/{formId}/questions/{questionId}
     * @allow (get, list) - Any user can read all questions.
     * @allow (create) - User 'abc' can create questions for form with form.ownerUid == 'abc'.
     * @deny (create) - User 'def' cannot create questions for form with form.ownerUid == 'abc'.
     * @deny (update, delete) - No one can update or delete a question.
     * @principle Allows public read access but only the form owner can create questions.
     */
    match /forms/{formId}/questions/{questionId} {
      function isSignedIn() {
          return request.auth != null;
        }

        function isFormOwner(formId) {
            return get(/databases/$(database)/documents/forms/$(formId)).data.ownerUid == request.auth.uid;
        }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isFormOwner(formId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages form submissions.
     * @path /submissions/{submissionId}
     * @allow (get, list) - Any user can read any submission.
     * @allow (create) - Any signed in user can create a submission.
     * @deny (update, delete) - No one can update or delete a submission.
     */
    match /submissions/{submissionId} {
      function isSignedIn() {
          return request.auth != null;
        }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}