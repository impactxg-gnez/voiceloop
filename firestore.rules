rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, list, update, delete) if the user is the owner of the profile.
     * @allow (create) if the authenticated user's ID matches the userId.
     * @deny (get, list, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to forms.
     * @path /forms/{formId}
     * @allow (get, list) Public read access.
     * @allow (create) if the authenticated user's UID matches the ownerUid in the request data.
     * @allow (update, delete) if the user is the owner of the form.
     * @deny (create, update, delete) if the user is not the owner of the form.
     * @principle Enforces owner-only writes for forms, public reads.
     */
    match /forms/{formId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerUid) {
        return request.auth.uid == ownerUid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.ownerUid);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerUid);
    }

    /**
     * @description Controls access to questions within a form.
     * @path /forms/{formId}/questions/{questionId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is the owner of the parent form.
     * @deny (create, update, delete) if the user is not the owner of the parent form.
     * @principle Enforces owner-only writes for questions, public reads.
     */
    match /forms/{formId}/questions/{questionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFormOwner(formId) {
        return get(/databases/$(database)/documents/forms/$(formId)).data.ownerUid == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isFormOwner(formId);
      allow update: if isSignedIn() && isFormOwner(formId);
      allow delete: if isSignedIn() && isFormOwner(formId);
    }

    /**
     * @description Controls access to submissions.
     * @path /submissions/{submissionId}
     * @allow (get, list, create) Public access. Authenticated users should include their uid.
     * @deny (update, delete) No updates or deletes are allowed on submissions.
     * @principle Allows public submissions, restricts modifications.
     */
    match /submissions/{submissionId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}