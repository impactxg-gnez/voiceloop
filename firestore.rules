rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching ID creates their profile.
     * @deny (create) User tries to create a profile with a different ID.
     * @allow (get, list, update, delete) User reads/writes their own profile.
     * @deny (get, list, update, delete) User tries to read/write another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for forms.
     * @path /forms/{formId}
     * @allow (create) User creates a new form with their UID as the ownerUid.
     * @deny (create) User tries to create a form with a different ownerUid.
     * @allow (get, list, update, delete) Owner reads/writes their own form.
     * @deny (get, list, update, delete) User tries to read/write another user's form.
     * @principle Enforces document ownership for writes.
     */
    match /forms/{formId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.ownerUid == request.auth.uid;
      }

      function isExistingOwner() {
        return isSignedIn() && resource.data.ownerUid == request.auth.uid;
      }

      allow get: if isSignedIn() && isOwner();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Restricts access to questions.
     * @path /forms/{formId}/questions/{questionId}
     * @allow (get) Anyone can read questions.
     * @deny (create, list, update, delete) No one can create, list, update, or delete questions via the client.
     * @principle Prevents unauthorized modification of question data.
     */
    match /forms/{formId}/questions/{questionId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to submissions, but requires authentication for creation.  Updates/deletes are disallowed.
     * @path /submissions/{submissionId}
     * @allow (get, list) Anyone can read submissions.
     * @allow (create) Authenticated user can create submissions.
     * @deny (update, delete) No one can update or delete submissions.
     * @principle Provides public read access while controlling write access.
     */
    match /submissions/{submissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}