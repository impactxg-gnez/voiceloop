/**
 * @fileoverview Firestore Security Rules for Vocalize Feedback platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user ownership.
 * Users can only create, read, update, and delete their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /forms/{formId}: Stores form data, with `ownerUid` indicating the creator.
 * - /forms/{formId}/questions/{questionId}: Stores questions related to a form.
 * - /submissions/{submissionId}: Stores individual form submissions.
 *
 * Key Security Decisions:
 * - Users are only able to list forms, but must be authenticated.
 * - `create` operations are allowed for users to create their root document. `id` is validated to be the same as `auth.uid` to prevent impersonation.
 * - All destructive operations (update, delete) require the document to exist.
 * - Data shape is not strictly enforced in this prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(formId) {
      return isSignedIn() && get(/databases/$(database)/documents/forms/$(formId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Checks if the authenticated user is the owner of the organization.
     */
    function isOrgOwner(ownerUid) {
      return isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }


    /**
     * @description Rules for user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user123' } } }
     * @allow (get, update, delete) - User with UID 'user123' can access their own profile.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) - User with UID 'user123' cannot create a profile for 'user456'.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user456' } } }
     * @deny (get, update, delete) - User with UID 'user123' cannot access 'user456' profile.
     *   Request: { auth: { uid: 'user123' } }
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for feedback forms.
     * @path /forms/{formId}
     * @allow (get, list) - Any authenticated user can read any form.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (create) - User with UID 'user123' can create a form with ownerUid 'user123'.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { ownerUid: 'user123' } } }
     * @allow (update, delete) - User with UID 'user123' can update/delete a form they own.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { ownerUid: 'user123' } } }
     * @deny (create) - User with UID 'user123' cannot create a form with ownerUid 'user456'.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { ownerUid: 'user456' } } }
     * @deny (update, delete) - User with UID 'user123' cannot update/delete a form owned by 'user456'.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { ownerUid: 'user456' } } }
     * @principle Enforces document ownership for writes and allows public read access.
     */
    match /forms/{formId} {
      allow get, list: if isSignedIn();

      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isExistingOwner(formId);
      allow delete: if isExistingOwner(formId);
    }

    /**
     * @description Rules for questions within a form.
     * @path /forms/{formId}/questions/{questionId}
     * @allow (get, list) - Any authenticated user can read questions for a form.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (create) - Only the form owner can create a question.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { } } } (Form owner is 'user123')
     * @allow (update, delete) - Only the form owner can update/delete a question.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { } } } (Form owner is 'user123')
     * @deny (create) - User with UID 'user123' cannot create a question for a form they don't own.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { } } } (Form owner is not 'user123')
     * @deny (update, delete) - User with UID 'user123' cannot update/delete a question for a form they don't own.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { } } } (Form owner is not 'user123')
     * @principle Enforces document ownership for writes and allows public read access.
     */
    match /forms/{formId}/questions/{questionId} {
       allow get, list: if isSignedIn();
      allow create: if isSignedIn() && get(/databases/$(database)/documents/forms/$(formId)).data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/forms/$(formId)).data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/forms/$(formId)).data.ownerUid == request.auth.uid;
    }

    /**
     * @description Rules for form submissions.
     * @path /submissions/{submissionId}
     * @allow (get, list) - Any authenticated user can read submissions.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (create) - Any authenticated user can create a submission.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { } } }
     * @allow (update, delete) - Only the submitter can update/delete their own submission.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { submitterUid: 'user123' } } }
     * @deny (update, delete) - User with UID 'user123' cannot update/delete a submission by 'user456'.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { submitterUid: 'user456' } } }
     * @principle Allows public read and write access, but restricts updates/deletes to the submitter.
     */
    match /submissions/{submissionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.submitterUid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.submitterUid == request.auth.uid;
    }
  }
}